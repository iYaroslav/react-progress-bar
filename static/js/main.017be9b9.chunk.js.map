{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["forwardRef","className","props","containerRef","useRef","sliderRef","valueRef","values","userHandled","progress","raf","apply","useCallback","cssProgressValue","onChange","onUserChange","updateProgress","value","Math","requestAnimationFrame","useEffect","container","onMove","e","bounds","onDown","styles","document","onUp","cancelAnimationFrame","useLayoutEffect","ref","el","slider","App","useState","sliderValue","setSliderValue","interval","setInterval","current","setValue","clearInterval","Array","fill","map","_","index","key","round","ReactDOM","render","getElementById"],"mappings":"yeA6IA,I,EAAeA,sBArHf,SAAkB,EAAlB,OACE,EADF,EACE,QADF,EACE,WADF,EACE,aADF,IACmCC,iBADnC,MACE,GADF,EACsDC,EADtD,+DAIQC,EAAeC,iBAArB,MACMC,EAAYD,iBAAlB,MACME,EAAWF,iBAAjB,MACMG,EAASH,iBAAO,CACpBI,aADoB,EAEpBC,SAFoB,EAGpBC,KAAM,IAGFC,EAAQC,uBAAY,WACxB,IAAMC,EAAmB,GAAH,OAAtB,IAA4BN,mBAAN,KAElBD,EAAJ,UACEA,yBAGED,EAAJ,UACEA,wBAGF,GACES,EAASP,UAATO,UAGEP,uBAAJ,GACEQ,EAAaR,UAAbQ,UAGFR,mBACC,CAACO,EApBJ,IAsBME,EAAiBJ,uBACpBK,YACC,IAAMR,EAAWS,WAAYA,WAAYA,eAAWD,GAApD,MACIV,qBAAJ,IACEA,sBAEA,IAAIA,gBACFA,cAAqBY,sBAArBZ,OAIN,CAXF,IAqEA,OAvDAa,qBAAU,WACR,IACA,EADMC,EAAYlB,EAAlB,QAGMmB,EAAUC,YACdP,GAAgBO,UAAYC,EAAb,MAA4BA,EAA3CR,QAGIS,EAAUF,YACdC,EAASH,EAATG,wBACAF,KACAf,yBACAc,gBAAwBK,EAAxBL,SACAM,4CACAA,2CAGIC,EAAO,SAAPA,IAEJrB,yBACAc,mBAA2BK,EAA3BL,SACAM,+CACAA,8CAKF,OAFAN,qCAEO,WACLQ,qBAAqBtB,UAArBsB,KACAR,2CA7BJD,IAiCAA,qBAAU,WACHb,UAAL,aACES,OAED,CAJHI,IAMAU,2BAAgB,WACd,GAAKC,GAAQ5B,EAAb,SACA,IAAM6B,EAAiC7B,EAAvC,QAEA6B,WAAef,aACZV,UAAD,aAA+BS,EAA/B,IAEFgB,WAAc,kBAAMzB,UAApByB,UAEA,oBAAWD,EACTA,KAEEA,eAEH,CAACA,EAdJD,IAiBE,uCACEC,IAAK5B,EACLF,UAAW,CAACyB,EAAD,wBAFb,GAKE,yBAAKzB,UAAWyB,EAAOjB,WACvB,yBAAKsB,IAAKzB,EAAUL,UAAWyB,EAAOT,QACtC,yBAAKc,IAAK1B,EAAWJ,UAAWyB,EAAOO,aC/F9BC,G,MApCH,WAAO,IAAD,EACsBC,mBAAS,GAD/B,mBACTC,EADS,KACIC,EADJ,KAIVN,EAAM3B,iBAAO,MAcnB,OAZAgB,qBAAU,WACR,IAAIH,EAAQ,EACNqB,EAAWC,aAAY,WAC3BtB,GAAS,KACTc,EAAIS,QAAQC,SAASxB,EAAQ,KAC5B,GAEH,OAAO,WACLyB,cAAcJ,MAEf,CAACP,IAEG,oCACJY,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAAC,EAAD,CACnC9C,UAAU,WACV+C,IAAKD,EACL9B,MAAO8B,EAAQ,OAGjB,kBAAC,EAAD,CAAUhB,IAAKA,EAAK9B,UAAU,mBAE9B,kBAAC,EAAD,CACEA,UAAU,eACVc,aAAcsB,IAGhB,qCAAWnB,KAAK+B,MAAoB,IAAdb,GAAtB,QC/BJc,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,W","file":"static/js/main.017be9b9.chunk.js","sourcesContent":["import React, {\n  useEffect,\n  useRef,\n  useCallback,\n  forwardRef,\n  useLayoutEffect,\n  CSSProperties,\n  Ref\n} from 'react'\nimport styles from './styles.module.css'\n\nexport interface Props {\n  value: number\n  className?: string\n  style?: CSSProperties\n  onChange?: (value: number) => void\n  onUserChange?: (value: number) => void\n}\n\nexport interface YSProgressElement extends HTMLDivElement {\n  setValue: (value: number) => void\n  getValue: () => number\n}\n\nfunction Progress(\n  { value, onChange, onUserChange, className = '', ...props }: Props,\n  ref: Ref<YSProgressElement>\n) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const sliderRef = useRef<HTMLDivElement>(null)\n  const valueRef = useRef<HTMLDivElement>(null)\n  const values = useRef({\n    userHandled: false,\n    progress: 0,\n    raf: -1\n  })\n\n  const apply = useCallback(() => {\n    const cssProgressValue = `${values.current.progress * 100}%`\n\n    if (valueRef.current) {\n      valueRef.current.style.width = cssProgressValue\n    }\n\n    if (sliderRef.current) {\n      sliderRef.current.style.left = cssProgressValue\n    }\n\n    if (onChange) {\n      onChange(values.current.progress)\n    }\n\n    if (values.current.userHandled && onUserChange) {\n      onUserChange(values.current.progress)\n    }\n\n    values.current.raf = -1\n  }, [onChange, onUserChange])\n\n  const updateProgress = useCallback(\n    (value: number) => {\n      const progress = Math.max(0, Math.min(1, Math.round(value * 100) / 100))\n      if (values.current.progress !== progress) {\n        values.current.progress = progress\n\n        if (values.current.raf === -1) {\n          values.current.raf = requestAnimationFrame(apply)\n        }\n      }\n    },\n    [apply]\n  )\n\n  useEffect(() => {\n    const container = containerRef.current!\n    let bounds: DOMRect\n\n    const onMove = (e: MouseEvent) => {\n      updateProgress((e.clientX - bounds.left) / bounds.width)\n    }\n\n    const onDown = (e: MouseEvent) => {\n      bounds = container.getBoundingClientRect()\n      onMove(e)\n      values.current.userHandled = true\n      container.classList.add(styles.handled)\n      document.addEventListener('mousemove', onMove, false)\n      document.addEventListener('mouseup', onUp, false)\n    }\n\n    const onUp = () => {\n      // TODO fire event\n      values.current.userHandled = false\n      container.classList.remove(styles.handled)\n      document.removeEventListener('mousemove', onMove, false)\n      document.removeEventListener('mouseup', onUp, false)\n    }\n\n    container.addEventListener('mousedown', onDown, false)\n\n    return () => {\n      cancelAnimationFrame(values.current.raf)\n      container.removeEventListener('mousedown', onDown, false)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!values.current.userHandled) {\n      updateProgress(value)\n    }\n  }, [value])\n\n  useLayoutEffect(() => {\n    if (!ref || !containerRef.current) return\n    const el: Partial<YSProgressElement> = containerRef.current\n\n    el.setValue = (value) => {\n      !values.current.userHandled && updateProgress(value)\n    }\n    el.getValue = () => values.current.progress\n\n    if (typeof ref === 'function') {\n      ref(el as YSProgressElement)\n    } else {\n      ;(ref as any).current = el as YSProgressElement\n    }\n  }, [ref, updateProgress])\n\n  return (\n    <div\n      ref={containerRef}\n      className={[styles.container, className].join(' ')}\n      {...props}\n    >\n      <div className={styles.progress} />\n      <div ref={valueRef} className={styles.value} />\n      <div ref={sliderRef} className={styles.slider} />\n    </div>\n  )\n}\n\nexport default forwardRef(Progress)\n","import React, { useEffect, useRef, useState } from 'react'\n\nimport Progress from 'react-progress-bar'\nimport 'react-progress-bar/dist/index.css'\n\nconst App = () => {\n  const [sliderValue, setSliderValue] = useState(0)\n\n  /** @type {{ current: YSProgressElement }} */\n  const ref = useRef(null)\n\n  useEffect(() => {\n    let value = 0\n    const interval = setInterval(() => {\n      value += 0.002\n      ref.current.setValue(value % 1)\n    }, 0)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [ref])\n\n  return <>\n    {Array(10).fill(0).map((_, index) => <Progress\n      className='progress'\n      key={index}\n      value={index / 9}\n    />)}\n\n    <Progress ref={ref} className='progress green' />\n\n    <Progress\n      className='progress red'\n      onUserChange={setSliderValue}\n    />\n\n    <p>Value: {Math.round(sliderValue * 100)}%</p>\n  </>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}